/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//------------------------------- nanoFluid4Foam project -------------------------------//
//Author
    //Ehsan Golab, SUT. All rights reserved.
    //Ehsan1996Golab@gmail.com

//--------------------------------------------------------------------------------------//

//Run using:
//m4 -P blockMeshDict.m4 > blockMeshDict

//m4 definitions:









//variables








// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
convertToMeters 0.001;

vertices
(
    //-Back
    (    0.0    0.0    -5    ) // Vertex B0 = 0 
    (    100    0.0    -5    ) // Vertex B1 = 1 
    (    100    100    -5    ) // Vertex B2 = 2 
    (    0.0    100    -5    ) // Vertex B3 = 3 

    //-Front
    (    0.0    0.0    5    ) // Vertex F0 = 4 
    (    100    0.0    5    ) // Vertex F1 = 5 
    (    100    100    5    ) // Vertex F2 = 6 
    (    0.0    100    5    ) // Vertex F3 = 7 
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (10 10 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    top
    {
        type wall;
        faces
        (
            (3 7 6 2)
        );
    }

    bottom
    {
        type wall;
        faces
        (
            (0 1 5 4)
        );
    }

    right
    {
        type wall;
        faces
        (
            (1 2 6 5)
        );
    }

    left
    {
        type wall;
        faces
        (
            (0 4 7 3)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
